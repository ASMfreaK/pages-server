// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"fmt"
	"strings"
)

const (
	// RepoTypeBranch is a RepoType of type Branch.
	RepoTypeBranch RepoType = iota
	// RepoTypeRelease is a RepoType of type Release.
	RepoTypeRelease
	// RepoTypePackage is a RepoType of type Package.
	RepoTypePackage
)

var ErrInvalidRepoType = fmt.Errorf("not a valid RepoType, try [%s]", strings.Join(_RepoTypeNames, ", "))

const _RepoTypeName = "branchreleasepackage"

var _RepoTypeNames = []string{
	_RepoTypeName[0:6],
	_RepoTypeName[6:13],
	_RepoTypeName[13:20],
}

// RepoTypeNames returns a list of possible string values of RepoType.
func RepoTypeNames() []string {
	tmp := make([]string, len(_RepoTypeNames))
	copy(tmp, _RepoTypeNames)
	return tmp
}

// RepoTypeValues returns a list of the values for RepoType
func RepoTypeValues() []RepoType {
	return []RepoType{
		RepoTypeBranch,
		RepoTypeRelease,
		RepoTypePackage,
	}
}

var _RepoTypeMap = map[RepoType]string{
	RepoTypeBranch:  _RepoTypeName[0:6],
	RepoTypeRelease: _RepoTypeName[6:13],
	RepoTypePackage: _RepoTypeName[13:20],
}

// String implements the Stringer interface.
func (x RepoType) String() string {
	if str, ok := _RepoTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RepoType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RepoType) IsValid() bool {
	_, ok := _RepoTypeMap[x]
	return ok
}

var _RepoTypeValue = map[string]RepoType{
	_RepoTypeName[0:6]:   RepoTypeBranch,
	_RepoTypeName[6:13]:  RepoTypeRelease,
	_RepoTypeName[13:20]: RepoTypePackage,
}

// ParseRepoType attempts to convert a string to a RepoType.
func ParseRepoType(name string) (RepoType, error) {
	if x, ok := _RepoTypeValue[name]; ok {
		return x, nil
	}
	return RepoType(0), fmt.Errorf("%s is %w", name, ErrInvalidRepoType)
}

// MarshalText implements the text marshaller method.
func (x RepoType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RepoType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRepoType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
